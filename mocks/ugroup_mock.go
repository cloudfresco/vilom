// Code generated by MockGen. DO NOT EDIT.
// Source: user/userservices/ugroup_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	userservices "github.com/cloudfresco/vilom/user/userservices"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUgroupServiceIntf is a mock of UgroupServiceIntf interface
type MockUgroupServiceIntf struct {
	ctrl     *gomock.Controller
	recorder *MockUgroupServiceIntfMockRecorder
}

// MockUgroupServiceIntfMockRecorder is the mock recorder for MockUgroupServiceIntf
type MockUgroupServiceIntfMockRecorder struct {
	mock *MockUgroupServiceIntf
}

// NewMockUgroupServiceIntf creates a new mock instance
func NewMockUgroupServiceIntf(ctrl *gomock.Controller) *MockUgroupServiceIntf {
	mock := &MockUgroupServiceIntf{ctrl: ctrl}
	mock.recorder = &MockUgroupServiceIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUgroupServiceIntf) EXPECT() *MockUgroupServiceIntfMockRecorder {
	return m.recorder
}

// CreateUgroup mocks base method
func (m *MockUgroupServiceIntf) CreateUgroup(ctx context.Context, form *userservices.Ugroup, userEmail, requestID string) (*userservices.Ugroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUgroup", ctx, form, userEmail, requestID)
	ret0, _ := ret[0].(*userservices.Ugroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUgroup indicates an expected call of CreateUgroup
func (mr *MockUgroupServiceIntfMockRecorder) CreateUgroup(ctx, form, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUgroup", reflect.TypeOf((*MockUgroupServiceIntf)(nil).CreateUgroup), ctx, form, userEmail, requestID)
}

// CreateChild mocks base method
func (m *MockUgroupServiceIntf) CreateChild(ctx context.Context, form *userservices.Ugroup, userEmail, requestID string) (*userservices.Ugroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChild", ctx, form, userEmail, requestID)
	ret0, _ := ret[0].(*userservices.Ugroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChild indicates an expected call of CreateChild
func (mr *MockUgroupServiceIntfMockRecorder) CreateChild(ctx, form, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChild", reflect.TypeOf((*MockUgroupServiceIntf)(nil).CreateChild), ctx, form, userEmail, requestID)
}

// AddUserToGroup mocks base method
func (m *MockUgroupServiceIntf) AddUserToGroup(ctx context.Context, form *userservices.UgroupUser, ID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", ctx, form, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup
func (mr *MockUgroupServiceIntfMockRecorder) AddUserToGroup(ctx, form, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockUgroupServiceIntf)(nil).AddUserToGroup), ctx, form, ID, userEmail, requestID)
}

// GetUgroups mocks base method
func (m *MockUgroupServiceIntf) GetUgroups(ctx context.Context, limit, nextCursor, userEmail, requestID string) (*userservices.UgroupCursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUgroups", ctx, limit, nextCursor, userEmail, requestID)
	ret0, _ := ret[0].(*userservices.UgroupCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUgroups indicates an expected call of GetUgroups
func (mr *MockUgroupServiceIntfMockRecorder) GetUgroups(ctx, limit, nextCursor, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUgroups", reflect.TypeOf((*MockUgroupServiceIntf)(nil).GetUgroups), ctx, limit, nextCursor, userEmail, requestID)
}

// TopLevelUgroups mocks base method
func (m *MockUgroupServiceIntf) TopLevelUgroups(ctx context.Context, userEmail, requestID string) ([]*userservices.Ugroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopLevelUgroups", ctx, userEmail, requestID)
	ret0, _ := ret[0].([]*userservices.Ugroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopLevelUgroups indicates an expected call of TopLevelUgroups
func (mr *MockUgroupServiceIntfMockRecorder) TopLevelUgroups(ctx, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopLevelUgroups", reflect.TypeOf((*MockUgroupServiceIntf)(nil).TopLevelUgroups), ctx, userEmail, requestID)
}

// GetParent mocks base method
func (m *MockUgroupServiceIntf) GetParent(ctx context.Context, ID, userEmail, requestID string) (*userservices.Ugroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParent", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*userservices.Ugroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParent indicates an expected call of GetParent
func (mr *MockUgroupServiceIntfMockRecorder) GetParent(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParent", reflect.TypeOf((*MockUgroupServiceIntf)(nil).GetParent), ctx, ID, userEmail, requestID)
}

// GetUgroup mocks base method
func (m *MockUgroupServiceIntf) GetUgroup(ctx context.Context, ID, userEmail, requestID string) (*userservices.Ugroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUgroup", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*userservices.Ugroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUgroup indicates an expected call of GetUgroup
func (mr *MockUgroupServiceIntfMockRecorder) GetUgroup(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUgroup", reflect.TypeOf((*MockUgroupServiceIntf)(nil).GetUgroup), ctx, ID, userEmail, requestID)
}

// GetUgroupByID mocks base method
func (m *MockUgroupServiceIntf) GetUgroupByID(ctx context.Context, ID, userEmail, requestID string) (*userservices.Ugroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUgroupByID", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*userservices.Ugroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUgroupByID indicates an expected call of GetUgroupByID
func (mr *MockUgroupServiceIntfMockRecorder) GetUgroupByID(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUgroupByID", reflect.TypeOf((*MockUgroupServiceIntf)(nil).GetUgroupByID), ctx, ID, userEmail, requestID)
}

// GetUgroupByIDuint mocks base method
func (m *MockUgroupServiceIntf) GetUgroupByIDuint(ctx context.Context, ID uint, userEmail, requestID string) (*userservices.Ugroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUgroupByIDuint", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*userservices.Ugroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUgroupByIDuint indicates an expected call of GetUgroupByIDuint
func (mr *MockUgroupServiceIntfMockRecorder) GetUgroupByIDuint(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUgroupByIDuint", reflect.TypeOf((*MockUgroupServiceIntf)(nil).GetUgroupByIDuint), ctx, ID, userEmail, requestID)
}

// GetChildUgroups mocks base method
func (m *MockUgroupServiceIntf) GetChildUgroups(ctx context.Context, ID, userEmail, requestID string) ([]*userservices.Ugroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildUgroups", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].([]*userservices.Ugroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildUgroups indicates an expected call of GetChildUgroups
func (mr *MockUgroupServiceIntfMockRecorder) GetChildUgroups(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildUgroups", reflect.TypeOf((*MockUgroupServiceIntf)(nil).GetChildUgroups), ctx, ID, userEmail, requestID)
}

// UpdateUgroup mocks base method
func (m *MockUgroupServiceIntf) UpdateUgroup(ctx context.Context, ID string, form *userservices.Ugroup, UserID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUgroup", ctx, ID, form, UserID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUgroup indicates an expected call of UpdateUgroup
func (mr *MockUgroupServiceIntfMockRecorder) UpdateUgroup(ctx, ID, form, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUgroup", reflect.TypeOf((*MockUgroupServiceIntf)(nil).UpdateUgroup), ctx, ID, form, UserID, userEmail, requestID)
}

// DeleteUgroup mocks base method
func (m *MockUgroupServiceIntf) DeleteUgroup(ctx context.Context, ID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUgroup", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUgroup indicates an expected call of DeleteUgroup
func (mr *MockUgroupServiceIntfMockRecorder) DeleteUgroup(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUgroup", reflect.TypeOf((*MockUgroupServiceIntf)(nil).DeleteUgroup), ctx, ID, userEmail, requestID)
}

// DeleteUserFromGroup mocks base method
func (m *MockUgroupServiceIntf) DeleteUserFromGroup(ctx context.Context, form *userservices.UgroupUser, ID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromGroup", ctx, form, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromGroup indicates an expected call of DeleteUserFromGroup
func (mr *MockUgroupServiceIntfMockRecorder) DeleteUserFromGroup(ctx, form, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromGroup", reflect.TypeOf((*MockUgroupServiceIntf)(nil).DeleteUserFromGroup), ctx, form, ID, userEmail, requestID)
}
