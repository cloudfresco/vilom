// Code generated by MockGen. DO NOT EDIT.
// Source: msg/msgservices/category_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	msgservices "github.com/cloudfresco/vilom/msg/msgservices"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCategoryServiceIntf is a mock of CategoryServiceIntf interface
type MockCategoryServiceIntf struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceIntfMockRecorder
}

// MockCategoryServiceIntfMockRecorder is the mock recorder for MockCategoryServiceIntf
type MockCategoryServiceIntfMockRecorder struct {
	mock *MockCategoryServiceIntf
}

// NewMockCategoryServiceIntf creates a new mock instance
func NewMockCategoryServiceIntf(ctrl *gomock.Controller) *MockCategoryServiceIntf {
	mock := &MockCategoryServiceIntf{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCategoryServiceIntf) EXPECT() *MockCategoryServiceIntfMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method
func (m *MockCategoryServiceIntf) CreateCategory(ctx context.Context, form *msgservices.Category, UserID, userEmail, requestID string) (*msgservices.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, form, UserID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory
func (mr *MockCategoryServiceIntfMockRecorder) CreateCategory(ctx, form, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryServiceIntf)(nil).CreateCategory), ctx, form, UserID, userEmail, requestID)
}

// CreateChild mocks base method
func (m *MockCategoryServiceIntf) CreateChild(ctx context.Context, form *msgservices.Category, UserID, userEmail, requestID string) (*msgservices.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChild", ctx, form, UserID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChild indicates an expected call of CreateChild
func (mr *MockCategoryServiceIntfMockRecorder) CreateChild(ctx, form, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChild", reflect.TypeOf((*MockCategoryServiceIntf)(nil).CreateChild), ctx, form, UserID, userEmail, requestID)
}

// GetCategories mocks base method
func (m *MockCategoryServiceIntf) GetCategories(ctx context.Context, limit, nextCursor, userEmail, requestID string) (*msgservices.CategoryCursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx, limit, nextCursor, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.CategoryCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (mr *MockCategoryServiceIntfMockRecorder) GetCategories(ctx, limit, nextCursor, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockCategoryServiceIntf)(nil).GetCategories), ctx, limit, nextCursor, userEmail, requestID)
}

// GetCategoryWithTopics mocks base method
func (m *MockCategoryServiceIntf) GetCategoryWithTopics(ctx context.Context, ID, userEmail, requestID string) (*msgservices.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryWithTopics", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryWithTopics indicates an expected call of GetCategoryWithTopics
func (mr *MockCategoryServiceIntfMockRecorder) GetCategoryWithTopics(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryWithTopics", reflect.TypeOf((*MockCategoryServiceIntf)(nil).GetCategoryWithTopics), ctx, ID, userEmail, requestID)
}

// GetCategory mocks base method
func (m *MockCategoryServiceIntf) GetCategory(ctx context.Context, ID, userEmail, requestID string) (*msgservices.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory
func (mr *MockCategoryServiceIntfMockRecorder) GetCategory(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockCategoryServiceIntf)(nil).GetCategory), ctx, ID, userEmail, requestID)
}

// GetCategoryByID mocks base method
func (m *MockCategoryServiceIntf) GetCategoryByID(ctx context.Context, ID uint, userEmail, requestID string) (*msgservices.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID
func (mr *MockCategoryServiceIntfMockRecorder) GetCategoryByID(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockCategoryServiceIntf)(nil).GetCategoryByID), ctx, ID, userEmail, requestID)
}

// GetTopLevelCategories mocks base method
func (m *MockCategoryServiceIntf) GetTopLevelCategories(ctx context.Context, userEmail, requestID string) ([]*msgservices.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopLevelCategories", ctx, userEmail, requestID)
	ret0, _ := ret[0].([]*msgservices.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopLevelCategories indicates an expected call of GetTopLevelCategories
func (mr *MockCategoryServiceIntfMockRecorder) GetTopLevelCategories(ctx, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopLevelCategories", reflect.TypeOf((*MockCategoryServiceIntf)(nil).GetTopLevelCategories), ctx, userEmail, requestID)
}

// GetChildCategories mocks base method
func (m *MockCategoryServiceIntf) GetChildCategories(ctx context.Context, ID, userEmail, requestID string) ([]*msgservices.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildCategories", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].([]*msgservices.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildCategories indicates an expected call of GetChildCategories
func (mr *MockCategoryServiceIntfMockRecorder) GetChildCategories(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildCategories", reflect.TypeOf((*MockCategoryServiceIntf)(nil).GetChildCategories), ctx, ID, userEmail, requestID)
}

// GetParentCategory mocks base method
func (m *MockCategoryServiceIntf) GetParentCategory(ctx context.Context, ID, userEmail, requestID string) (*msgservices.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentCategory", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentCategory indicates an expected call of GetParentCategory
func (mr *MockCategoryServiceIntfMockRecorder) GetParentCategory(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentCategory", reflect.TypeOf((*MockCategoryServiceIntf)(nil).GetParentCategory), ctx, ID, userEmail, requestID)
}

// UpdateCategory mocks base method
func (m *MockCategoryServiceIntf) UpdateCategory(ctx context.Context, ID string, form *msgservices.Category, UserID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, ID, form, UserID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockCategoryServiceIntfMockRecorder) UpdateCategory(ctx, ID, form, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryServiceIntf)(nil).UpdateCategory), ctx, ID, form, UserID, userEmail, requestID)
}

// UpdateNumTopics mocks base method
func (m *MockCategoryServiceIntf) UpdateNumTopics(ctx context.Context, tx *sql.Tx, numTopics, ID uint, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNumTopics", ctx, tx, numTopics, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNumTopics indicates an expected call of UpdateNumTopics
func (mr *MockCategoryServiceIntfMockRecorder) UpdateNumTopics(ctx, tx, numTopics, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNumTopics", reflect.TypeOf((*MockCategoryServiceIntf)(nil).UpdateNumTopics), ctx, tx, numTopics, ID, userEmail, requestID)
}

// DeleteCategory mocks base method
func (m *MockCategoryServiceIntf) DeleteCategory(ctx context.Context, ID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory
func (mr *MockCategoryServiceIntfMockRecorder) DeleteCategory(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryServiceIntf)(nil).DeleteCategory), ctx, ID, userEmail, requestID)
}
