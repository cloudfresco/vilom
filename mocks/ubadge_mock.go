// Code generated by MockGen. DO NOT EDIT.
// Source: user/userservices/ubadge_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	userservices "github.com/cloudfresco/vilom/user/userservices"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUbadgeServiceIntf is a mock of UbadgeServiceIntf interface
type MockUbadgeServiceIntf struct {
	ctrl     *gomock.Controller
	recorder *MockUbadgeServiceIntfMockRecorder
}

// MockUbadgeServiceIntfMockRecorder is the mock recorder for MockUbadgeServiceIntf
type MockUbadgeServiceIntfMockRecorder struct {
	mock *MockUbadgeServiceIntf
}

// NewMockUbadgeServiceIntf creates a new mock instance
func NewMockUbadgeServiceIntf(ctrl *gomock.Controller) *MockUbadgeServiceIntf {
	mock := &MockUbadgeServiceIntf{ctrl: ctrl}
	mock.recorder = &MockUbadgeServiceIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUbadgeServiceIntf) EXPECT() *MockUbadgeServiceIntfMockRecorder {
	return m.recorder
}

// CreateUbadge mocks base method
func (m *MockUbadgeServiceIntf) CreateUbadge(ctx context.Context, form *userservices.Ubadge, userEmail, requestID string) (*userservices.Ubadge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUbadge", ctx, form, userEmail, requestID)
	ret0, _ := ret[0].(*userservices.Ubadge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUbadge indicates an expected call of CreateUbadge
func (mr *MockUbadgeServiceIntfMockRecorder) CreateUbadge(ctx, form, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUbadge", reflect.TypeOf((*MockUbadgeServiceIntf)(nil).CreateUbadge), ctx, form, userEmail, requestID)
}

// AddUserToGroup mocks base method
func (m *MockUbadgeServiceIntf) AddUserToGroup(ctx context.Context, form *userservices.UbadgeUser, ID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", ctx, form, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup
func (mr *MockUbadgeServiceIntfMockRecorder) AddUserToGroup(ctx, form, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockUbadgeServiceIntf)(nil).AddUserToGroup), ctx, form, ID, userEmail, requestID)
}

// GetUbadges mocks base method
func (m *MockUbadgeServiceIntf) GetUbadges(ctx context.Context, limit, nextCursor, userEmail, requestID string) (*userservices.UbadgeCursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUbadges", ctx, limit, nextCursor, userEmail, requestID)
	ret0, _ := ret[0].(*userservices.UbadgeCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUbadges indicates an expected call of GetUbadges
func (mr *MockUbadgeServiceIntfMockRecorder) GetUbadges(ctx, limit, nextCursor, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUbadges", reflect.TypeOf((*MockUbadgeServiceIntf)(nil).GetUbadges), ctx, limit, nextCursor, userEmail, requestID)
}

// GetUbadge mocks base method
func (m *MockUbadgeServiceIntf) GetUbadge(ctx context.Context, ID, userEmail, requestID string) (*userservices.Ubadge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUbadge", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*userservices.Ubadge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUbadge indicates an expected call of GetUbadge
func (mr *MockUbadgeServiceIntfMockRecorder) GetUbadge(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUbadge", reflect.TypeOf((*MockUbadgeServiceIntf)(nil).GetUbadge), ctx, ID, userEmail, requestID)
}

// GetUbadgeByID mocks base method
func (m *MockUbadgeServiceIntf) GetUbadgeByID(ctx context.Context, ID, userEmail, requestID string) (*userservices.Ubadge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUbadgeByID", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*userservices.Ubadge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUbadgeByID indicates an expected call of GetUbadgeByID
func (mr *MockUbadgeServiceIntfMockRecorder) GetUbadgeByID(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUbadgeByID", reflect.TypeOf((*MockUbadgeServiceIntf)(nil).GetUbadgeByID), ctx, ID, userEmail, requestID)
}

// UpdateUbadge mocks base method
func (m *MockUbadgeServiceIntf) UpdateUbadge(ctx context.Context, ID string, form *userservices.Ubadge, UserID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUbadge", ctx, ID, form, UserID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUbadge indicates an expected call of UpdateUbadge
func (mr *MockUbadgeServiceIntfMockRecorder) UpdateUbadge(ctx, ID, form, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUbadge", reflect.TypeOf((*MockUbadgeServiceIntf)(nil).UpdateUbadge), ctx, ID, form, UserID, userEmail, requestID)
}

// DeleteUbadge mocks base method
func (m *MockUbadgeServiceIntf) DeleteUbadge(ctx context.Context, ID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUbadge", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUbadge indicates an expected call of DeleteUbadge
func (mr *MockUbadgeServiceIntfMockRecorder) DeleteUbadge(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUbadge", reflect.TypeOf((*MockUbadgeServiceIntf)(nil).DeleteUbadge), ctx, ID, userEmail, requestID)
}

// DeleteUserFromGroup mocks base method
func (m *MockUbadgeServiceIntf) DeleteUserFromGroup(ctx context.Context, form *userservices.UbadgeUser, ID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromGroup", ctx, form, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromGroup indicates an expected call of DeleteUserFromGroup
func (mr *MockUbadgeServiceIntfMockRecorder) DeleteUserFromGroup(ctx, form, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromGroup", reflect.TypeOf((*MockUbadgeServiceIntf)(nil).DeleteUserFromGroup), ctx, form, ID, userEmail, requestID)
}
