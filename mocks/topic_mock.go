// Code generated by MockGen. DO NOT EDIT.
// Source: msg/msgservices/topic_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	msgservices "github.com/cloudfresco/vilom/msg/msgservices"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTopicServiceIntf is a mock of TopicServiceIntf interface
type MockTopicServiceIntf struct {
	ctrl     *gomock.Controller
	recorder *MockTopicServiceIntfMockRecorder
}

// MockTopicServiceIntfMockRecorder is the mock recorder for MockTopicServiceIntf
type MockTopicServiceIntfMockRecorder struct {
	mock *MockTopicServiceIntf
}

// NewMockTopicServiceIntf creates a new mock instance
func NewMockTopicServiceIntf(ctrl *gomock.Controller) *MockTopicServiceIntf {
	mock := &MockTopicServiceIntf{ctrl: ctrl}
	mock.recorder = &MockTopicServiceIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTopicServiceIntf) EXPECT() *MockTopicServiceIntfMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method
func (m *MockTopicServiceIntf) CreateTopic(ctx context.Context, form *msgservices.Topic, UserID, userEmail, requestID string) (*msgservices.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", ctx, form, UserID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic
func (mr *MockTopicServiceIntfMockRecorder) CreateTopic(ctx, form, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockTopicServiceIntf)(nil).CreateTopic), ctx, form, UserID, userEmail, requestID)
}

// ShowTopic mocks base method
func (m *MockTopicServiceIntf) ShowTopic(ctx context.Context, ID, UserID, userEmail, requestID string) (*msgservices.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowTopic", ctx, ID, UserID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowTopic indicates an expected call of ShowTopic
func (mr *MockTopicServiceIntfMockRecorder) ShowTopic(ctx, ID, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowTopic", reflect.TypeOf((*MockTopicServiceIntf)(nil).ShowTopic), ctx, ID, UserID, userEmail, requestID)
}

// GetTopicByID mocks base method
func (m *MockTopicServiceIntf) GetTopicByID(ctx context.Context, ID uint, userEmail, requestID string) (*msgservices.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicByID", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicByID indicates an expected call of GetTopicByID
func (mr *MockTopicServiceIntfMockRecorder) GetTopicByID(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicByID", reflect.TypeOf((*MockTopicServiceIntf)(nil).GetTopicByID), ctx, ID, userEmail, requestID)
}

// GetTopic mocks base method
func (m *MockTopicServiceIntf) GetTopic(ctx context.Context, ID, userEmail, requestID string) (*msgservices.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopic", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopic indicates an expected call of GetTopic
func (mr *MockTopicServiceIntfMockRecorder) GetTopic(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopic", reflect.TypeOf((*MockTopicServiceIntf)(nil).GetTopic), ctx, ID, userEmail, requestID)
}

// GetTopicByName mocks base method
func (m *MockTopicServiceIntf) GetTopicByName(ctx context.Context, topicname, userEmail, requestID string) (*msgservices.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicByName", ctx, topicname, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicByName indicates an expected call of GetTopicByName
func (mr *MockTopicServiceIntfMockRecorder) GetTopicByName(ctx, topicname, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicByName", reflect.TypeOf((*MockTopicServiceIntf)(nil).GetTopicByName), ctx, topicname, userEmail, requestID)
}

// GetTopicWithMessages mocks base method
func (m *MockTopicServiceIntf) GetTopicWithMessages(ctx context.Context, ID, userEmail, requestID string) (*msgservices.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicWithMessages", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicWithMessages indicates an expected call of GetTopicWithMessages
func (mr *MockTopicServiceIntfMockRecorder) GetTopicWithMessages(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicWithMessages", reflect.TypeOf((*MockTopicServiceIntf)(nil).GetTopicWithMessages), ctx, ID, userEmail, requestID)
}

// GetTopicMessages mocks base method
func (m *MockTopicServiceIntf) GetTopicMessages(ctx context.Context, uuid4byte []byte, userEmail, requestID string) (*msgservices.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicMessages", ctx, uuid4byte, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicMessages indicates an expected call of GetTopicMessages
func (mr *MockTopicServiceIntfMockRecorder) GetTopicMessages(ctx, uuid4byte, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicMessages", reflect.TypeOf((*MockTopicServiceIntf)(nil).GetTopicMessages), ctx, uuid4byte, userEmail, requestID)
}

// GetTopicsUser mocks base method
func (m *MockTopicServiceIntf) GetTopicsUser(ctx context.Context, ID, UserID uint, userEmail, requestID string) (*msgservices.TopicsUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicsUser", ctx, ID, UserID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.TopicsUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicsUser indicates an expected call of GetTopicsUser
func (mr *MockTopicServiceIntfMockRecorder) GetTopicsUser(ctx, ID, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicsUser", reflect.TypeOf((*MockTopicServiceIntf)(nil).GetTopicsUser), ctx, ID, UserID, userEmail, requestID)
}

// UpdateTopic mocks base method
func (m *MockTopicServiceIntf) UpdateTopic(ctx context.Context, ID string, form *msgservices.Topic, UserID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopic", ctx, ID, form, UserID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTopic indicates an expected call of UpdateTopic
func (mr *MockTopicServiceIntfMockRecorder) UpdateTopic(ctx, ID, form, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopic", reflect.TypeOf((*MockTopicServiceIntf)(nil).UpdateTopic), ctx, ID, form, UserID, userEmail, requestID)
}

// UpdateNumMessages mocks base method
func (m *MockTopicServiceIntf) UpdateNumMessages(ctx context.Context, tx *sql.Tx, numMessages, ID uint, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNumMessages", ctx, tx, numMessages, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNumMessages indicates an expected call of UpdateNumMessages
func (mr *MockTopicServiceIntfMockRecorder) UpdateNumMessages(ctx, tx, numMessages, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNumMessages", reflect.TypeOf((*MockTopicServiceIntf)(nil).UpdateNumMessages), ctx, tx, numMessages, ID, userEmail, requestID)
}

// DeleteTopic mocks base method
func (m *MockTopicServiceIntf) DeleteTopic(ctx context.Context, ID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopic", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopic indicates an expected call of DeleteTopic
func (mr *MockTopicServiceIntfMockRecorder) DeleteTopic(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockTopicServiceIntf)(nil).DeleteTopic), ctx, ID, userEmail, requestID)
}
