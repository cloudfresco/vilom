// Code generated by MockGen. DO NOT EDIT.
// Source: msg/msgservices/channel_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	msgservices "github.com/cloudfresco/vilom/msg/msgservices"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChannelServiceIntf is a mock of ChannelServiceIntf interface
type MockChannelServiceIntf struct {
	ctrl     *gomock.Controller
	recorder *MockChannelServiceIntfMockRecorder
}

// MockChannelServiceIntfMockRecorder is the mock recorder for MockChannelServiceIntf
type MockChannelServiceIntfMockRecorder struct {
	mock *MockChannelServiceIntf
}

// NewMockChannelServiceIntf creates a new mock instance
func NewMockChannelServiceIntf(ctrl *gomock.Controller) *MockChannelServiceIntf {
	mock := &MockChannelServiceIntf{ctrl: ctrl}
	mock.recorder = &MockChannelServiceIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChannelServiceIntf) EXPECT() *MockChannelServiceIntfMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method
func (m *MockChannelServiceIntf) CreateChannel(ctx context.Context, form *msgservices.Channel, UserID, userEmail, requestID string) (*msgservices.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", ctx, form, UserID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockChannelServiceIntfMockRecorder) CreateChannel(ctx, form, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChannelServiceIntf)(nil).CreateChannel), ctx, form, UserID, userEmail, requestID)
}

// ShowChannel mocks base method
func (m *MockChannelServiceIntf) ShowChannel(ctx context.Context, ID, UserID, userEmail, requestID string) (*msgservices.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowChannel", ctx, ID, UserID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowChannel indicates an expected call of ShowChannel
func (mr *MockChannelServiceIntfMockRecorder) ShowChannel(ctx, ID, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowChannel", reflect.TypeOf((*MockChannelServiceIntf)(nil).ShowChannel), ctx, ID, UserID, userEmail, requestID)
}

// GetChannelByID mocks base method
func (m *MockChannelServiceIntf) GetChannelByID(ctx context.Context, ID uint, userEmail, requestID string) (*msgservices.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByID", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelByID indicates an expected call of GetChannelByID
func (mr *MockChannelServiceIntfMockRecorder) GetChannelByID(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByID", reflect.TypeOf((*MockChannelServiceIntf)(nil).GetChannelByID), ctx, ID, userEmail, requestID)
}

// GetChannel mocks base method
func (m *MockChannelServiceIntf) GetChannel(ctx context.Context, ID, userEmail, requestID string) (*msgservices.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel
func (mr *MockChannelServiceIntfMockRecorder) GetChannel(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockChannelServiceIntf)(nil).GetChannel), ctx, ID, userEmail, requestID)
}

// GetChannelByName mocks base method
func (m *MockChannelServiceIntf) GetChannelByName(ctx context.Context, channelname, userEmail, requestID string) (*msgservices.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByName", ctx, channelname, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelByName indicates an expected call of GetChannelByName
func (mr *MockChannelServiceIntfMockRecorder) GetChannelByName(ctx, channelname, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByName", reflect.TypeOf((*MockChannelServiceIntf)(nil).GetChannelByName), ctx, channelname, userEmail, requestID)
}

// GetChannelWithMessages mocks base method
func (m *MockChannelServiceIntf) GetChannelWithMessages(ctx context.Context, ID, userEmail, requestID string) (*msgservices.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelWithMessages", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelWithMessages indicates an expected call of GetChannelWithMessages
func (mr *MockChannelServiceIntfMockRecorder) GetChannelWithMessages(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelWithMessages", reflect.TypeOf((*MockChannelServiceIntf)(nil).GetChannelWithMessages), ctx, ID, userEmail, requestID)
}

// GetChannelMessages mocks base method
func (m *MockChannelServiceIntf) GetChannelMessages(ctx context.Context, uuid4byte []byte, userEmail, requestID string) (*msgservices.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMessages", ctx, uuid4byte, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelMessages indicates an expected call of GetChannelMessages
func (mr *MockChannelServiceIntfMockRecorder) GetChannelMessages(ctx, uuid4byte, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMessages", reflect.TypeOf((*MockChannelServiceIntf)(nil).GetChannelMessages), ctx, uuid4byte, userEmail, requestID)
}

// GetChannelsUser mocks base method
func (m *MockChannelServiceIntf) GetChannelsUser(ctx context.Context, ID, UserID uint, userEmail, requestID string) (*msgservices.ChannelsUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelsUser", ctx, ID, UserID, userEmail, requestID)
	ret0, _ := ret[0].(*msgservices.ChannelsUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelsUser indicates an expected call of GetChannelsUser
func (mr *MockChannelServiceIntfMockRecorder) GetChannelsUser(ctx, ID, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelsUser", reflect.TypeOf((*MockChannelServiceIntf)(nil).GetChannelsUser), ctx, ID, UserID, userEmail, requestID)
}

// UpdateChannel mocks base method
func (m *MockChannelServiceIntf) UpdateChannel(ctx context.Context, ID string, form *msgservices.Channel, UserID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", ctx, ID, form, UserID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChannel indicates an expected call of UpdateChannel
func (mr *MockChannelServiceIntfMockRecorder) UpdateChannel(ctx, ID, form, UserID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockChannelServiceIntf)(nil).UpdateChannel), ctx, ID, form, UserID, userEmail, requestID)
}

// UpdateNumMessages mocks base method
func (m *MockChannelServiceIntf) UpdateNumMessages(ctx context.Context, tx *sql.Tx, numMessages, ID uint, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNumMessages", ctx, tx, numMessages, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNumMessages indicates an expected call of UpdateNumMessages
func (mr *MockChannelServiceIntfMockRecorder) UpdateNumMessages(ctx, tx, numMessages, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNumMessages", reflect.TypeOf((*MockChannelServiceIntf)(nil).UpdateNumMessages), ctx, tx, numMessages, ID, userEmail, requestID)
}

// DeleteChannel mocks base method
func (m *MockChannelServiceIntf) DeleteChannel(ctx context.Context, ID, userEmail, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", ctx, ID, userEmail, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel
func (mr *MockChannelServiceIntfMockRecorder) DeleteChannel(ctx, ID, userEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChannelServiceIntf)(nil).DeleteChannel), ctx, ID, userEmail, requestID)
}
